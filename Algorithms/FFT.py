import cmath
from numpy import pi


def FFT (complex_vector):
    complex_vector = pad_to_power_of_two(complex_vector)
    N = len (complex_vector)

    

    if N == 1:
        return complex_vector

    half_length = N // 2

    even = []
    odd = []
    for sample in range (0, len (complex_vector) - 1, 2):
        even.append( complex_vector [sample])
        odd.append( complex_vector [sample + 1])

    even_result = FFT (even)
    odd_result = FFT (odd)

    frequency_bins = [0] * N

    for i in range(half_length):

        complex_exponential = cmath.rect(1.0, -2*pi*i/N)*odd_result[i]
        frequency_bins[i] = even_result[i]+complex_exponential
        frequency_bins[i+half_length] = even_result[i]-complex_exponential

    return frequency_bins

def change_format(frequency_bins, sample_frequency):
    N = len(frequency_bins)
    frequency_bins = frequency_bins[:N//2]
    print(frequency_bins)
    frequency_resolution = sample_frequency/N
    for i in range(len(frequency_bins)):
        frequency_bins[i] = [frequency_resolution*i, round(abs(frequency_bins[i])*2/N, 3)]
    
    return frequency_bins


def next_power_of_two(x):
    return 1 if x == 0 else 2**(x - 1).bit_length()

def pad_to_power_of_two(complex_vector):
    N = len(complex_vector)
    next_pow2 = next_power_of_two(N)
    return complex_vector + [0] * (next_pow2 - N)

frequency_bins = FFT([0.0, 0.0634239196565645, 0.12659245357374926, 0.1892512443604102, 0.2511479871810792, 0.3120334456984871, 0.3716624556603275, 0.4297949120891717, 0.4861967361004687, 0.5406408174555976, 0.5929079290546405, 0.6427876096865394, 0.6900790114821119, 0.7345917086575333, 0.7761464642917569, 0.8145759520503357, 0.8497254299495144, 0.8814533634475822, 0.9096319953545183, 0.9341478602651067, 0.954902241444074, 0.9718115683235417, 0.9848077530122081, 0.9938384644612541, 0.998867339183008, 0.9998741276738751, 0.9968547759519424, 0.9898214418809327, 0.9788024462147786, 0.9638421585599422, 0.9450008187146685, 0.9223542941045814, 0.8959937742913359, 0.8660254037844386, 0.8325698546347711, 0.795761840530832, 0.7557495743542583, 0.7126941713788627, 0.6667690005162916, 0.6181589862206052, 0.5670598638627704, 0.5136773915734063, 0.4582265217274105, 0.4009305354066136, 0.3420201433256685, 0.28173255684142967, 0.22031053278654036, 0.15800139597334945, 0.09505604330418288, 0.031727933498067656, -0.03172793349806786, -0.09505604330418307, -0.15800139597335008, -0.22031053278654056, -0.28173255684142984, -0.34202014332566866, -0.4009305354066142, -0.4582265217274107, -0.5136773915734061, -0.567059863862771, -0.6181589862206053, -0.6667690005162918, -0.7126941713788629, -0.7557495743542587, -0.7957618405308321, -0.8325698546347713, -0.8660254037844388, -0.895993774291336, -0.9223542941045817, -0.9450008187146683, -0.9638421585599422, -0.9788024462147787, -0.9898214418809327, -0.9968547759519424, -0.9998741276738751, -0.998867339183008, -0.9938384644612541, -0.9848077530122081, -0.9718115683235417, -0.9549022414440739, -0.9341478602651064, -0.9096319953545182, -0.881453363447582, -0.8497254299495144, -0.8145759520503358, -0.7761464642917566, -0.7345917086575331, -0.6900790114821114, -0.6427876096865389, -0.5929079290546402, -0.5406408174555974, -0.4861967361004688, -0.42979491208917114, -0.37166245566032724, -0.31203344569848623, -0.2511479871810794, -0.18925124436041063, -0.12659245357374904, -0.06342391965656452, -2.4492935982947064e-16])
print(frequency_bins)
print(change_format(frequency_bins, 100))